pitch_speed = pitch_speed_mph,
cmj_jump_height = "jump_height_(imp-mom)_[cm]_mean_cmj",
cmj_peak_power  = "peak_power_[w]_mean_cmj",
cmj_rsi         = "rsi-modified_[m/s]_mean_cmj",
cmj_concentric_force = "concentric_peak_force_[n]_mean_cmj",
cmj_eccentric_force = "eccentric_peak_force_[n]_mean_cmj",
sj_jump_height  = "jump_height_(imp-mom)_[cm]_mean_sj",
sj_peak_power   = "peak_power_[w]_mean_sj",
imtp_vertical_force = "peak_vertical_force_[n]_max_imtp",
imtp_net_force = "net_peak_vertical_force_[n]_max_imtp",
imtp_100ms = "force_at_100ms_[n]_max_imtp",
imtp_150ms = "force_at_150ms_[n]_max_imtp",
imtp_200ms = "force_at_200ms_[n]_max_imtp",
ht_jump_height = "best_jump_height_(flight_time)_[cm]_mean_ht",
ht_rsi = "best_rsi_(jump_height/contact_time)_[m/s]_mean_ht",
body_weight     = "body_weight_[lbs]"
) %>%
select(
pitch_speed,
cmj_jump_height,
cmj_peak_power,
cmj_rsi,
cmj_concentric_force,
cmj_eccentric_force,
sj_jump_height,
sj_peak_power,
imtp_net_force,
imtp_vertical_force,
imtp_100ms,
imtp_150ms,
imtp_200ms,
ht_jump_height,
ht_rsi,
body_weight
)
# 3. Clean Data
df <- df[complete.cases(df) & pitch_speed >= 65]
# 4. IQR-based Outlier Filtering
filter_iqr <- function(data, cols, thresh = 1.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, names(df)[-1], thresh = 2)
# 5. Feature/Target Split
X <- df[, !"pitch_speed", with = FALSE]
y <- df$pitch_speed
# 6. Convert to matrix
X_matrix <- as.matrix(X)
# 7. Train/Test Split
set.seed(42)
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_matrix[train_index, ]
X_test <- X_matrix[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
# 8. Convert to DMatrix
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 9. Cross-validation to find optimal nrounds
params <- list(
objective = "reg:squarederror",
eta = 0.03,
max_depth = 4,
subsample = 0.8,
colsample_bytree = 0.7,
gamma = 1,
eval_metric = "rmse"
)
cv <- xgb.cv(
params = params,
data = dtrain,
nrounds = 500,
nfold = 5,
early_stopping_rounds = 20,
verbose = 0
)
best_nrounds <- cv$best_iteration
# 10. Train final model
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = best_nrounds,
watchlist = list(train = dtrain, test = dtest),
print_every_n = 10,
early_stopping_rounds = 20
)
# 11. Predict & Evaluate
y_pred <- predict(xgb_model, newdata = dtest)
r2 <- cor(y_test, y_pred)^2
rmse <- sqrt(mean((y_test - y_pred)^2))
cat("XGBoost Model Performance:\n")
cat("R-squared: ", round(r2, 3), "\n")
cat("RMSE: ", round(rmse, 3), "mph\n")
# 12. Plot Actual vs Predicted
plot_data <- data.frame(Actual = y_test, Predicted = y_pred)
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "red") +
labs(title = "XGBoost Regression: Actual vs. Predicted Pitch Speed",
x = "Actual Pitch Speed (mph)",
y = "Predicted Pitch Speed (mph)") +
theme_minimal()
# 13. Feature Importance
importance_matrix <- xgb.importance(feature_names = colnames(X_train), model = xgb_model)
print(importance_matrix)
# Strength Model
library(data.table)
library(xgboost)
library(caret)
library(ggplot2)
library(dplyr)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
# 2. Rename Columns
df <- df %>%
rename(
pitch_speed = pitch_speed_mph,
cmj_jump_height = "jump_height_(imp-mom)_[cm]_mean_cmj",
cmj_peak_power  = "peak_power_[w]_mean_cmj",
cmj_rsi         = "rsi-modified_[m/s]_mean_cmj",
cmj_concentric_force = "concentric_peak_force_[n]_mean_cmj",
cmj_eccentric_force = "eccentric_peak_force_[n]_mean_cmj",
sj_jump_height  = "jump_height_(imp-mom)_[cm]_mean_sj",
sj_peak_power   = "peak_power_[w]_mean_sj",
imtp_vertical_force = "peak_vertical_force_[n]_max_imtp",
imtp_net_force = "net_peak_vertical_force_[n]_max_imtp",
imtp_100ms = "force_at_100ms_[n]_max_imtp",
imtp_150ms = "force_at_150ms_[n]_max_imtp",
imtp_200ms = "force_at_200ms_[n]_max_imtp",
ht_jump_height = "best_jump_height_(flight_time)_[cm]_mean_ht",
ht_rsi = "best_rsi_(jump_height/contact_time)_[m/s]_mean_ht",
body_weight     = "body_weight_[lbs]"
)
# 3. Keep only relevant columns
top_features <- c(
"sj_peak_power", "cmj_peak_power", "cmj_eccentric_force", "cmj_concentric_force",
"ht_jump_height", "sj_jump_height", "ht_rsi", "body_weight",
"imtp_net_force", "imtp_200ms"
)
df <- df %>% select(pitch_speed, all_of(top_features))
# 4. Clean data
df <- df[complete.cases(df) & pitch_speed >= 65]
# 5. IQR Outlier Filtering (threshold = 2.5)
filter_iqr <- function(data, cols, thresh = 2.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, top_features, thresh = 2.5)
# 6. Feature/Target Split
X <- df[, !"pitch_speed", with = FALSE]
y <- df$pitch_speed
X_matrix <- as.matrix(X)
# 7. Train/Test Split
set.seed(42)
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_matrix[train_index, ]
X_test <- X_matrix[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
# 8. Convert to DMatrix
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 9. Cross-Validation for Optimal Rounds
params <- list(
objective = "reg:squarederror",
eta = 0.01,
max_depth = 4,
subsample = 0.8,
colsample_bytree = 0.7,
gamma = 1,
eval_metric = "rmse"
)
cv <- xgb.cv(
params = params,
data = dtrain,
nrounds = 1000,
nfold = 5,
early_stopping_rounds = 25,
verbose = 0
)
best_nrounds <- cv$best_iteration
# 10. Final Model Training
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = best_nrounds,
watchlist = list(train = dtrain, test = dtest),
print_every_n = 10,
early_stopping_rounds = 25
)
# 11. Predict & Evaluate
y_pred <- predict(xgb_model, newdata = dtest)
r2 <- cor(y_test, y_pred)^2
rmse <- sqrt(mean((y_test - y_pred)^2))
cat("XGBoost Model Performance:\n")
cat("R-squared: ", round(r2, 3), "\n")
cat("RMSE: ", round(rmse, 3), "mph\n")
# 12. Plot Actual vs Predicted
plot_data <- data.frame(Actual = y_test, Predicted = y_pred)
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "red") +
labs(title = "XGBoost Regression: Actual vs. Predicted Pitch Speed",
x = "Actual Pitch Speed (mph)",
y = "Predicted Pitch Speed (mph)") +
theme_minimal()
# 13. Feature Importance
importance_matrix <- xgb.importance(feature_names = colnames(X_train), model = xgb_model)
print(importance_matrix)
# Strength Model
library(data.table)
library(xgboost)
library(caret)
library(ggplot2)
library(dplyr)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
# 4. Clean data
df <- df[complete.cases(df) & pitch_speed_mph >= 65]
# 5. IQR Outlier Filtering (threshold = 2.5)
filter_iqr <- function(data, cols, thresh = 2.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, top_features, thresh = 2.5)
# 5. IQR Outlier Filtering (threshold = 2.5)
filter_iqr <- function(data, cols, thresh = 2.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, thresh = 2.5)
source("~/Documents/GitHub/HES5903/StrengthModel.R", echo=TRUE)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
colnames(df)
# Strength Model
library(data.table)
library(xgboost)
library(caret)
library(ggplot2)
library(dplyr)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
# 2. Rename Columns
df <- df %>%
rename(
# pitch_speed = "pitch_speed_mph",
pitch_speed = "bat_speed_mph",
cmj_jump_height = "jump_height_(imp-mom)_[cm]_mean_cmj",
cmj_peak_power  = "peak_power_[w]_mean_cmj",
cmj_rsi         = "rsi-modified_[m/s]_mean_cmj",
cmj_concentric_force = "concentric_peak_force_[n]_mean_cmj",
cmj_eccentric_force = "eccentric_peak_force_[n]_mean_cmj",
sj_jump_height  = "jump_height_(imp-mom)_[cm]_mean_sj",
sj_peak_power   = "peak_power_[w]_mean_sj",
imtp_vertical_force = "peak_vertical_force_[n]_max_imtp",
imtp_net_force = "net_peak_vertical_force_[n]_max_imtp",
imtp_100ms = "force_at_100ms_[n]_max_imtp",
imtp_150ms = "force_at_150ms_[n]_max_imtp",
imtp_200ms = "force_at_200ms_[n]_max_imtp",
ht_jump_height = "best_jump_height_(flight_time)_[cm]_mean_ht",
ht_rsi = "best_rsi_(jump_height/contact_time)_[m/s]_mean_ht",
body_weight     = "body_weight_[lbs]"
)
# 3. Keep only relevant columns
top_features <- c(
"sj_peak_power", "cmj_peak_power", "cmj_eccentric_force", "cmj_concentric_force",
"ht_jump_height", "sj_jump_height", "ht_rsi", "body_weight",
"imtp_net_force", "imtp_200ms"
)
df <- df %>% select(pitch_speed, all_of(top_features))
# 4. Clean data
df <- df[complete.cases(df) & pitch_speed >= 65]
# 5. IQR Outlier Filtering (threshold = 2.5)
filter_iqr <- function(data, cols, thresh = 2.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, top_features, thresh = 2.5)
# 6. Feature/Target Split
X <- df[, !"pitch_speed", with = FALSE]
y <- df$pitch_speed
X_matrix <- as.matrix(X)
# 7. Train/Test Split
set.seed(42)
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_matrix[train_index, ]
X_test <- X_matrix[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
# 8. Convert to DMatrix
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 9. Cross-Validation for Optimal Rounds
params <- list(
objective = "reg:squarederror",
eta = 0.01,
max_depth = 4,
subsample = 0.8,
colsample_bytree = 0.7,
gamma = 1,
eval_metric = "rmse"
)
cv <- xgb.cv(
params = params,
data = dtrain,
nrounds = 1000,
nfold = 5,
early_stopping_rounds = 25,
verbose = 0
)
best_nrounds <- cv$best_iteration
# 10. Final Model Training
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = best_nrounds,
watchlist = list(train = dtrain, test = dtest),
print_every_n = 10,
early_stopping_rounds = 25
)
# 11. Predict & Evaluate
y_pred <- predict(xgb_model, newdata = dtest)
r2 <- cor(y_test, y_pred)^2
rmse <- sqrt(mean((y_test - y_pred)^2))
cat("XGBoost Model Performance:\n")
cat("R-squared: ", round(r2, 3), "\n")
cat("RMSE: ", round(rmse, 3), "mph\n")
# 12. Plot Actual vs Predicted
plot_data <- data.frame(Actual = y_test, Predicted = y_pred)
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "red") +
labs(title = "XGBoost Regression: Actual vs. Predicted Pitch Speed",
x = "Actual Pitch Speed (mph)",
y = "Predicted Pitch Speed (mph)") +
theme_minimal()
# 13. Feature Importance
importance_matrix <- xgb.importance(feature_names = colnames(X_train), model = xgb_model)
print(importance_matrix)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
# 2. Rename Columns
df <- df %>%
rename(
# pitch_speed = "pitch_speed_mph",
pitch_speed = "bat_speed_mph",
cmj_jump_height = "jump_height_(imp-mom)_[cm]_mean_cmj",
cmj_peak_power  = "peak_power_[w]_mean_cmj",
cmj_rsi         = "rsi-modified_[m/s]_mean_cmj",
cmj_concentric_force = "concentric_peak_force_[n]_mean_cmj",
cmj_eccentric_force = "eccentric_peak_force_[n]_mean_cmj",
sj_jump_height  = "jump_height_(imp-mom)_[cm]_mean_sj",
sj_peak_power   = "peak_power_[w]_mean_sj",
imtp_vertical_force = "peak_vertical_force_[n]_max_imtp",
imtp_net_force = "net_peak_vertical_force_[n]_max_imtp",
imtp_100ms = "force_at_100ms_[n]_max_imtp",
imtp_150ms = "force_at_150ms_[n]_max_imtp",
imtp_200ms = "force_at_200ms_[n]_max_imtp",
ht_jump_height = "best_jump_height_(flight_time)_[cm]_mean_ht",
ht_rsi = "best_rsi_(jump_height/contact_time)_[m/s]_mean_ht",
body_weight     = "body_weight_[lbs]"
)
# 3. Keep only relevant columns
top_features <- c(
"sj_peak_power", "cmj_peak_power", "cmj_eccentric_force", "cmj_concentric_force",
"ht_jump_height", "sj_jump_height", "ht_rsi", "body_weight",
"imtp_net_force", "imtp_200ms"
)
df <- df %>% select(pitch_speed, all_of(top_features))
summary(df$pitch_speed)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")
# 2. Rename Columns
df <- df %>%
rename(
# pitch_speed = "pitch_speed_mph",
pitch_speed = "bat_speed_mph",
cmj_jump_height = "jump_height_(imp-mom)_[cm]_mean_cmj",
cmj_peak_power  = "peak_power_[w]_mean_cmj",
cmj_rsi         = "rsi-modified_[m/s]_mean_cmj",
cmj_concentric_force = "concentric_peak_force_[n]_mean_cmj",
cmj_eccentric_force = "eccentric_peak_force_[n]_mean_cmj",
sj_jump_height  = "jump_height_(imp-mom)_[cm]_mean_sj",
sj_peak_power   = "peak_power_[w]_mean_sj",
imtp_vertical_force = "peak_vertical_force_[n]_max_imtp",
imtp_net_force = "net_peak_vertical_force_[n]_max_imtp",
imtp_100ms = "force_at_100ms_[n]_max_imtp",
imtp_150ms = "force_at_150ms_[n]_max_imtp",
imtp_200ms = "force_at_200ms_[n]_max_imtp",
ht_jump_height = "best_jump_height_(flight_time)_[cm]_mean_ht",
ht_rsi = "best_rsi_(jump_height/contact_time)_[m/s]_mean_ht",
body_weight     = "body_weight_[lbs]"
)
# 3. Keep only relevant columns
top_features <- c(
"sj_peak_power", "cmj_peak_power", "cmj_eccentric_force", "cmj_concentric_force",
"ht_jump_height", "sj_jump_height", "ht_rsi", "body_weight",
"imtp_net_force", "imtp_200ms"
)
df <- df %>% select(pitch_speed, all_of(top_features))
# 4. Clean data
df <- df[complete.cases(df) & pitch_speed >= 50]
# 5. IQR Outlier Filtering (threshold = 2.5)
filter_iqr <- function(data, cols, thresh = 2.5) {
for (col in cols) {
Q1 <- quantile(data[[col]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[col]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower <- Q1 - thresh * IQR
upper <- Q3 + thresh * IQR
data <- data %>% filter(.data[[col]] >= lower & .data[[col]] <= upper)
}
return(data)
}
df <- filter_iqr(df, top_features, thresh = 2.5)
# 6. Feature/Target Split
X <- df[, !"pitch_speed", with = FALSE]
y <- df$pitch_speed
X_matrix <- as.matrix(X)
# 7. Train/Test Split
set.seed(42)
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_matrix[train_index, ]
X_test <- X_matrix[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
# 8. Convert to DMatrix
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 9. Cross-Validation for Optimal Rounds
params <- list(
objective = "reg:squarederror",
eta = 0.01,
max_depth = 4,
subsample = 0.8,
colsample_bytree = 0.7,
gamma = 1,
eval_metric = "rmse"
)
cv <- xgb.cv(
params = params,
data = dtrain,
nrounds = 1000,
nfold = 5,
early_stopping_rounds = 25,
verbose = 0
)
best_nrounds <- cv$best_iteration
# 10. Final Model Training
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = best_nrounds,
watchlist = list(train = dtrain, test = dtest),
print_every_n = 10,
early_stopping_rounds = 25
)
# 11. Predict & Evaluate
y_pred <- predict(xgb_model, newdata = dtest)
r2 <- cor(y_test, y_pred)^2
rmse <- sqrt(mean((y_test - y_pred)^2))
cat("XGBoost Model Performance:\n")
cat("R-squared: ", round(r2, 3), "\n")
cat("RMSE: ", round(rmse, 3), "mph\n")
# 12. Plot Actual vs Predicted
plot_data <- data.frame(Actual = y_test, Predicted = y_pred)
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "red") +
labs(title = "XGBoost Regression: Actual vs. Predicted Pitch Speed",
x = "Actual Pitch Speed (mph)",
y = "Predicted Pitch Speed (mph)") +
theme_minimal()
# 13. Feature Importance
importance_matrix <- xgb.importance(feature_names = colnames(X_train), model = xgb_model)
print(importance_matrix)
