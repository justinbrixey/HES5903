pip install ezc3d
library(shiny); runApp('OUSportScience/Baseball/BSBL2024-25/appSample/BSBLDashboard.R')
source("~/Documents/GitHub/HES5903/StrengthModel.R", echo=TRUE)
setwd("~/Documents/GitHub/HES5903")
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")  # Update file path if needed
#Strength Model
library(data.table)
library(xgboost)
library(caret)
library(ggplot2)
# 1. Load Dataset
df <- fread("Data/strengthMetrics.csv")  # Update file path if needed
# 2. Select Relevant Features
selected_features <- c("pitch_speed_mph",
"jump_height_(imp-mom)_[cm]_mean_cmj",
"peak_power_[w]_mean_cmj",
"rsi-modified_[m/s]_mean_cmj",
"concentric_peak_force_[n]_mean_cmj",
"jump_height_(imp-mom)_[cm]_mean_sj",
"peak_power_[w]_mean_sj",
"peak_vertical_force_[n]_max_imtp",
"force_at_100ms_[n]_max_imtp",
"force_at_150ms_[n]_max_imtp",
"force_at_200ms_[n]_max_imtp",
"body_weight_[lbs]"
)
# 3. Filter Data (Remove Missing Values & Exclude Pitch Speeds < 70 mph)
df <- df[, ..selected_features]
df <- df[complete.cases(df) & pitch_speed_mph >= 60]
# 4. Split Data into Features (X) and Target (y)
X <- df[, !"pitch_speed_mph", with = FALSE]  # Remove target variable
y <- df$pitch_speed_mph  # Target variable
# 5. Convert Data to Matrix (Required for XGBoost)
X_matrix <- as.matrix(X)
# 6. Split into Training (70%) and Testing (30%) Sets
set.seed(42)  # For reproducibility
train_index <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X_matrix[train_index, ]
X_test <- X_matrix[-train_index, ]
y_train <- y[train_index]
y_test <- y[-train_index]
# 7. Convert Data to XGBoost DMatrix Format
dtrain <- xgb.DMatrix(data = X_train, label = y_train)
dtest <- xgb.DMatrix(data = X_test, label = y_test)
# 8. Train XGBoost Model
params <- list(
objective = "reg:squarederror",  # Regression task
booster = "gbtree",  # Use tree-based boosting
eta = 0.1,  # Learning rate
max_depth = 3,  # Depth of trees
nrounds = 250,  # Number of boosting rounds
eval_metric = "rmse"  # Evaluation metric
)
xgb_model <- xgb.train(
params = params,
data = dtrain,
nrounds = 250,
watchlist = list(train = dtrain, test = dtest),
print_every_n = 10
)
# 9. Make Predictions on Test Set
y_pred <- predict(xgb_model, newdata = dtest)
# 10. Evaluate Model Performance
r2 <- cor(y_test, y_pred)^2  # R-squared
rmse <- sqrt(mean((y_test - y_pred)^2))  # Root Mean Squared Error
# Print Results
cat("XGBoost Model Performance:\n")
cat("R-squared: ", round(r2, 3), "\n")
cat("RMSE: ", round(rmse, 3), "mph\n")
# 11. Plot Actual vs. Predicted Pitch Speed
plot_data <- data.frame(Actual = y_test, Predicted = y_pred)
ggplot(plot_data, aes(x = Actual, y = Predicted)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", color = "red") +
labs(title = "XGBoost Regression: Actual vs. Predicted Pitch Speed",
x = "Actual Pitch Speed (mph)",
y = "Predicted Pitch Speed (mph)") +
theme_minimal()
shinyApp(ui, function(input, output) {})
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
ui <- page_sidebar(
title = "HES5903 Project",
theme = bs_theme(
version = 5,
bootswatch = "darkly",
base_font = font_google("Inter")
)
)
runApp('DashboardProject')
runApp('DashboardProject')
setwd("~/GitHub/HES5903/HES5903")
setwd("~/GitHub/HES5903/DashboardProject")
runApp('~/GitHub/HES5903/HES5903/Dashboard.R')
runApp('~/GitHub/HES5903/HES5903/Dashboard.R')
runApp('~/GitHub/HES5903/HES5903/Dashboard.R')
runApp('~/GitHub/HES5903/HES5903/Dashboard.R')
runApp('~/GitHub/HES5903/HES5903/Dashboard.R')
data <- read.csv("Data/strengthMetrics.csv", stringsAsFactors = FALSE)
setwd("~/GitHub/HES5903/HES5903")
data <- read.csv("Data/strengthMetrics.csv", stringsAsFactors = FALSE)
data$UniqueID <- 1:nrow(data)
data <- data %>%
mutate(player_type = ifelse(!is.na(pitch_speed_mph) & pitch_speed_mph != "" &
(is.na(bat_speed_mph) | bat_speed_mph == ""),
"Pitcher",
ifelse(!is.na(bat_speed_mph) & bat_speed_mph != "" &
(is.na(pitch_speed_mph) | pitch_speed_mph == ""),
"Hitter",
NA)))
data <- data %>%
group_by(player_type) %>%
mutate(display_name = ifelse(!is.na(player_type), paste(player_type, row_number()), NA)) %>%
ungroup()
data$speed <- ifelse(!is.na(data$pitch_speed_mph) & data$pitch_speed_mph != "",
data$pitch_speed_mph, data$bat_speed_mph)
kpi_cols <- c("speed",
"peak_power_.w._mean_cmj",
"peak_power_.w._mean_sj",
"net_peak_vertical_force_.n._max_imtp",
"best_rsi_.jump_height.contact_time._.m.s._mean_ht",
"body_weight_.lbs.")
data <- data %>%
mutate(across(all_of(kpi_cols), ~ percent_rank(.) * 100, .names = "norm_{.col}"))
set.seed(123)  # Optional: for reproducibility
athlete_choices <- data %>%
filter(player_type %in% c("Pitcher", "Hitter")) %>%
group_by(player_type) %>%
sample_n(5) %>%
ungroup()
View(athlete_choices)
colnames(athlete_choices)
runApp('Dashboard.R')
# ---------- Global Section ----------
data <- read.csv("Data/strengthMetrics.csv", stringsAsFactors = FALSE)
data$UniqueID <- 1:nrow(data)
data <- data %>%
mutate(player_type = ifelse(!is.na(pitch_speed_mph) & pitch_speed_mph != "" &
(is.na(bat_speed_mph) | bat_speed_mph == ""),
"Pitcher",
ifelse(!is.na(bat_speed_mph) & bat_speed_mph != "" &
(is.na(pitch_speed_mph) | pitch_speed_mph == ""),
"Hitter",
NA)))
data <- data %>%
group_by(player_type) %>%
mutate(display_name = ifelse(!is.na(player_type), paste(player_type, row_number()), NA)) %>%
ungroup()
data$speed <- ifelse(!is.na(data$pitch_speed_mph) & data$pitch_speed_mph != "",
data$pitch_speed_mph, data$bat_speed_mph)
kpi_cols <- c("speed",
"peak_power_.w._mean_cmj",
"peak_power_.w._mean_sj",
"net_peak_vertical_force_.n._max_imtp",
"best_rsi_.jump_height.contact_time._.m.s._mean_ht",
"body_weight_.lbs.")
data <- data %>%
mutate(across(all_of(kpi_cols), ~ percent_rank(.) * 100, .names = "norm_{.col}")) %>%
drop_na()
runApp('Dashboard.R')
colnames(athlete_choices)
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
runApp('Dashboard.R')
library(shiny); runApp('Dashboard.R')
?radarchart
runApp('Dashboard.R')
